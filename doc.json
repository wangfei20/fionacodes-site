{"content":"<h2 id=\"part-0\">Introduction</h2>\n<p>Waku (wah-ku) or わく means “framework” in Japanese. As the minimal React framework, it’s designed to accelerate the work of developers at startups and agencies building small to medium-sized React projects. These include marketing websites, light ecommerce, and web applications.</p>\n<p>We recommend other frameworks for heavy ecommerce or enterprise applications. Waku is a lightweight alternative bringing a fast developer experience to the modern React server components era. Yes, let’s make React development fast again!</p>\n<blockquote>\n<p>Waku is in rapid development and some features are currently missing. Please try it on non-production projects and report any issues you may encounter. Expect that there will be some breaking changes on the road towards a stable v1 release. Contributors are welcome.</p>\n</blockquote>\n<h2 id=\"part-854\">Getting started</h2>\n<p>Start a new Waku project with the create command for your preferred package manager. It will scaffold a new project with our default Waku starter.</p>\n<pre><code class=\"language-javascript\">npm create waku@latest\n</code></pre>\n<p><strong>Node.js version requirement:</strong> <code>^20.8.0 or ^18.17.0</code></p>\n<h2 id=\"part-1195\">Rendering</h2>\n<p>While there’s a little bit of a learning curve to modern React rendering, it introduces powerful new patterns of full-stack composability that are only possible with the advent of server components.</p>\n<p>So please don’t be intimidated by the 'use client' directive! Once you get the hang of it, you’ll appreciate how awesome it is to flexibly move server-client boundaries with a single line of code as your full-stack React codebase evolves over time. It’s way simpler than maintaining separate codebases for your backend and frontend.</p>\n<p>And please don’t fret about client components! Even if you only lightly optimize towards server components, your client bundle size will be smaller than traditional React frameworks, which are always 100% client components.</p>\n<p>NOTE\r\nFuture versions of Waku may provide additional opt-in APIs to abstract some of the complexity away for an improved developer experience.</p>\n<p>SERVER COMPONENTS\r\nServer components can be made async and can securely perform server-side logic and data fetching. Feel free to access the local file-system and import heavy dependencies since they aren’t included in the client bundle. They have no state, interactivity, or access to browser APIs since they run exclusively on the server.</p>\n<pre><code class=\"language-javascript\">// server component\r\nimport db from 'some-db';\r\n\r\nimport { Gallery } from '../components/gallery';\r\n\r\nexport const Store = async () => {\r\n  const products = await db.query('SELECT * FROM products');\r\n\r\n  return &#x3C;Gallery products={products} />;\r\n};\n</code></pre>\n<p>CLIENT COMPONENTS\r\nA 'use client' directive placed at the top of a file will create a server-client boundary when imported into a server component. All components imported below the boundary will be hydrated to run in the browser as well. They can use all traditional React features such as state, effects, and event handlers.</p>\n<pre><code class=\"language-javascript\">// client component\r\n'use client';\r\n\r\nimport { useState } from 'react';\r\n\r\nexport const Counter = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    &#x3C;>\r\n      &#x3C;div>Count: {count}&#x3C;/div>\r\n      &#x3C;button onClick={() => setCount((c) => c + 1)}>Increment&#x3C;/button>\r\n    &#x3C;/>\r\n  );\r\n};\r\n\n</code></pre>\n<p>SHARED COMPONENTS\r\nSimple React components that meet all of the rules of both server and client components can be imported into either server or client components without affecting the server-client boundary.</p>\n"}