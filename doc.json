{"content":"<h2 id=\"part-0\">Introduction</h2>\n<p>FreactJs, or Freact, is a lightweight yet powerful version of React developed by <a href=\"https://freact.vercel.app/about\">Fiona Wang</a>. It comes with most core functionalities and almost identical API of React, ensuring a consistent and familiar development experience for developers.</p>\n<p>We recommend React or other similar framework for heavy ecommerce or enterprise applications. Freact is a lightweight alternative bringing a more simple development experience to the modern React era. Yes, letâ€™s make React development simple again!</p>\n<blockquote>\n<p>Freact is in rapid development and some features are currently missing. Please try it on non-production projects and report any issues you may encounter. Expect that there will be some breaking changes on the road towards a stable v1 release. Contributors are welcome.</p>\n</blockquote>\n<h2 id=\"part-876\">Getting started</h2>\n<p>Start a new Freact project is easy. create-freact-app will scaffold a new project with our default Freact starter.</p>\n<pre><code class=\"language-javascript\">git clone https://github.com/wangfei20/create-freact-app\n</code></pre>\n<p><strong>Node.js version requirement:</strong> <code>^20.8.0 or ^18.17.0</code></p>\n<h2 id=\"part-1219\">Functional Component</h2>\n<p>As you see, it's just like how you would write a React component. And to keep things simple, Freact only supports functional components.</p>\n<pre><code class=\"language-javascript\">import React, {render} from 'freact'\r\n\r\nconst Greeting = ({name, children}) => {\r\n  return (\r\n    &#x3C;>\r\n        &#x3C;h1>Greetings, {name}!&#x3C;/h1>      \r\n        {children}\r\n    &#x3C;/>\r\n  )\r\n}\r\n\r\nrender(\r\n  &#x3C;Greeting name=\"Fiona\">This is a Freact Component&#x3C;/Greeting>,\r\n  document.getElementById('root')\r\n);\n</code></pre>\n<h2 id=\"part-1772\">Hooks</h2>\n<p>What's a component without Hooks? Freact comes with most common Hooks to ensure a smooth development and it will support custom hooks in the near future.</p>\n<p>Now let's take a look.</p>\n<h3>useState</h3>\n<p>useState Hook is the most important and fundamental out of all Hooks, allowing you to manage state within functional components.</p>\n<pre><code class=\"language-javascript\">\r\nimport React, {useState} from 'freact'\r\n\r\nconst Example = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const toggleAuth = () => {\r\n    setIsAuthenticated(prevState => !prevState);\r\n  };\r\n  \r\n  return (\r\n    &#x3C;div>\r\n      { isAuthenticated ? \"Hello Fiona\"/> : \"Please Login\" }\r\n      &#x3C;button onclick={toggleAuth}>\r\n        {\r\n            isAuthenticated ? 'Logout' : 'Login'\r\n    \r\n        }\r\n      &#x3C;/button>\r\n    &#x3C;/div>\r\n  )\r\n}\r\n\n</code></pre>\n<p><strong>Freact keeps native DOM event and raw HTML attribute/property names, while also supporting className.</strong></p>\n<h3>useEffect and useRef</h3>\n<p>The useEffect Hook allows you to perform side effects in your components, such as data fetching and subscriptions. It accepts a function and a dependency array as arguments. The function is called based on changes to dependencies or lifecycle events.</p>\n<p>useRef Hooks allows you to store/access data throughout the component's lifecycle and change it without triggering rerender.</p>\n<p>This counter example showcases both at work.</p>\n<pre><code class=\"language-javascript\">\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n  const intervalRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    startWatch()    \r\n    return () => {\r\n      clearInterval(intervalRef.current);\r\n    };\r\n  },[]);\r\n\r\n  function startWatch(){\r\n    intervalRef.current = setInterval(() => {\r\n      setCount(prev=>prev+1);\r\n    }, 1000);\r\n  }\r\n\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;p>Count: {count}&#x3C;/p>\r\n      &#x3C;button onclick={() => startWatch()}>\r\n        Start \r\n      &#x3C;/button>\r\n      &#x3C;button onclick={()=>{clearInterval(intervalRef.current)}}>\r\n        Stop\r\n      &#x3C;/button>\r\n    &#x3C;/div>\r\n  );\r\n}\n</code></pre>\n<h2 id=\"part-3963\">Context</h2>\n<p>Freact offers Context to pass data through component tree and manage global state easily.</p>\n<p>Here's an example demonstrating the usage of Context with an authentication scenario:</p>\n<pre><code class=\"language-javascript\">import React, {useState, createContext, useContext} from 'freact'\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = function({ children }) {\r\n\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;AuthContext.Provider value={{ isAuthenticated, setIsAuthenticated }}>\r\n        {children}\r\n      &#x3C;/AuthContext.Provider>\r\n    &#x3C;/div>\r\n  );\r\n}; \r\n\r\nconst Example = () => {\r\n  const {isAuthenticated, setIsAuthenticated} = useContext(AuthContext);\r\n  const toggleAuth = (e) => {\r\n    setIsAuthenticated(!isAuthenticated)\r\n  }\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;p>{ isAuthenticated ? \"Hello Fiona\" : \"Please Login\" }&#x3C;/p>\r\n      &#x3C;button onclick={toggleAuth}>\r\n        {\r\n            isAuthenticated ? 'Logout' : 'Login'\r\n        }\r\n      &#x3C;/button>\r\n    &#x3C;/div>\r\n  );\r\n};\r\n\r\nconst App(){\r\n  return (\r\n    &#x3C;AuthProvider>\r\n      &#x3C;Example>&#x3C;/Example>\r\n    &#x3C;/AuthProvider>\r\n  )\r\n}\r\n\n</code></pre>\n<h2 id=\"part-5214\">Memoization</h2>\n<p>Memoization helps optimize component performance by caching the results of expensive computations. Freact provides built-in memo function and 2 Hooks (useMemo and useCallback) to memoize data and prevent unnecessary re-renders.</p>\n<pre><code class=\"language-javascript\">\r\nimport React, {memo, useMemo, useCallback} from 'freact'\r\n\n</code></pre>\n<h3>Memoized Component</h3>\n<p>The memo function can be used to create a memoized component, preventing unnecessary re-renders when the component receives the same props:</p>\n<pre><code class=\"language-javascript\">const ExpensiveComponent = memo((props) => {\r\n  // ... expensive computations\r\n});\n</code></pre>\n<h2 id=\"part-5895\">useMemo</h2>\n<p>The useMemo Hook is used to memoize the result of a computation, preventing unnecessary recalculations between component re-renders. The Hook updates the memoized value only when the dependencies change.</p>\n<pre><code class=\"language-javascript\">\r\nconst Example = ({data}) => {\r\n\r\n  const filteredData = useMemo(() => {\r\n    let result;\r\n    // ... expensive computations\r\n    return result;\r\n  }, [data]);\r\n  \r\n  // ...\r\n\r\n};\r\n\n</code></pre>\n<h3>useCallback</h3>\n<p>The useCallback Hook is used to memoize callback functions, ensuring that the function is re-created only when its dependencies change.</p>\n<pre><code class=\"language-javascript\">\r\nconst Example = ({data}) => {\r\n\r\n  const handleSubmit = useCallback((dataToSubmit) => {\r\n    // ... expensive computations\r\n  }, [data]);\r\n \r\n  // ...\r\n};\r\n\n</code></pre>\n<h2 id=\"part-6735\">Router</h2>\n<p>In addition, Freact also comes with Link component and useRouter inspired by NextJS.</p>\n<pre><code class=\"language-javascript\">import {Link, useRouter} from '@freact/router'\r\n\r\nconst Layout = ({children}) => {\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;div>\r\n        &#x3C;Link href=\"/\">Home&#x3C;/Link>\r\n        &#x3C;Link href=\"/about\">About&#x3C;/Link>\r\n      &#x3C;/div>\r\n      &#x3C;Route path=\"/\" component={Home}/>\r\n      &#x3C;Route path=\"/about\" component={About}/>\r\n  &#x3C;/div>\r\n  )\r\n}\n</code></pre>\n"}